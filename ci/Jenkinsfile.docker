pipeline {
  agent any
  stages {
    stage('Init') {
      steps {
/* 
 * FIXME(sileht): Put this in Jenkins lib to be able to load it in all projects
        script {
          def common = load("ci/Jenkinsfile.common");
          common.cancelPreviousBuilds();
        }
*/
        sh 'printenv | sort'
      }
    }
    stage('Build docker images') {
        steps { sh 'ci/build-docker-images.sh' }
    }
    stage('Update dockerhub readme') {
      when {
       expression { BRANCH_NAME == "master" }
      }
      steps {
        sh '''
wget https://github.com/christian-korneck/docker-pushrm/releases/download/v1.6.0/docker-pushrm_linux_amd64
chmod +x docker-pushrm_linux_amd64
./docker-pushrm_linux_amd64 jolibrain/platform_ui
'''
      }
  }
  post {
    always {
      cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true, cleanWhenUnstable: true, cleanupMatrixParent: true, deleteDirs: true);
    }
    success {
      catchError {
        rocketSend(channel: 'build', message: 'Build succeed' ,color: 'green' )
      }
    }
    aborted {
      catchError {
        rocketSend(channel: 'build', message: 'Build superseded or aborted')
      }
    }
    unstable {
      catchError {
        rocketSend(channel: 'build', message: 'Build failed', color: 'red')
      }
    }
    failure {
      catchError {
        rocketSend(channel: 'build', message: 'Build failed', color: 'red')
      }
    }
  }
}
